services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    networks:
      - spring-net

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      STORAGE_TYPE: mem
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - spring-net

  discoveryserver:
    build:
      context: .
      dockerfile: DiscoveryServer/Dockerfile
    container_name: discoveryserver
    image: ${DOCKER_USERNAME}/discoveryserver:latest
    ports:
      - "8761:8761"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spring-net

  configserver:
    build:
      context: .
      dockerfile: ConfigServer/Dockerfile
    container_name: configserver
    image: ${DOCKER_USERNAME}/configserver:latest
    ports:
      - "8888:8888"
    depends_on:
      discoveryserver:
        condition: service_healthy
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discoveryserver:8761/eureka
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spring-net

  apigateway:
    build:
      context: .
      dockerfile: APIGateway/Dockerfile
    container_name: apigateway
    image: ${DOCKER_USERNAME}/apigateway:latest
    ports:
      - "8081:8081"
    depends_on:
      discoveryserver:
        condition: service_healthy
      redis-ktpm:
        condition: service_healthy
    environment:
      SPRING_CONFIG_IMPORT: optional:configserver:http://configserver:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discoveryserver:8761/eureka
      SPRING_DATA_REDIS_HOST: redis-ktpm
      SPRING_DATA_REDIS_PORT: 6379
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spring-net

  userservice:
    build:
      context: .
      dockerfile: UserService/Dockerfile
    container_name: userservice
    image: ${DOCKER_USERNAME}/userservice:latest
    ports:
      - "9001:9001"
    depends_on:
      configserver:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
    volumes:
      - ./logs:/logs  
    environment:
      LOG_PATH: /logs
      SPRING_DATASOURCE_URL: jdbc:sqlserver://host.docker.internal:1433;databaseName=UserDB;encrypt=false
      SPRING_DATASOURCE_USERNAME: sa
      SPRING_DATASOURCE_PASSWORD: sapassword
      SPRING_CONFIG_IMPORT: optional:configserver:http://configserver:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discoveryserver:8761/eureka
      SPRING_ZIPKIN_BASE-URL: http://zipkin:9411
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9001/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spring-net

  productservice:
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    container_name: productservice
    image: ${DOCKER_USERNAME}/productservice:latest
    ports:
      - "9002:9002"
    depends_on:
      configserver:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
      zipkin:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:sqlserver://host.docker.internal:1433;databaseName=ProductDB;encrypt=false
      SPRING_DATASOURCE_USERNAME: sa
      SPRING_DATASOURCE_PASSWORD: sapassword
      SPRING_CONFIG_IMPORT: optional:configserver:http://configserver:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discoveryserver:8761/eureka
      SPRING_ZIPKIN_BASE-URL: http://zipkin:9411
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9002/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spring-net

  inventoryservice:
    build:
      context: .
      dockerfile: InventoryService/Dockerfile
    container_name: inventoryservice
    image: ${DOCKER_USERNAME}/inventoryservice:latest
    ports:
      - "9006:9006"
    depends_on:
      configserver:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:sqlserver://host.docker.internal:1433;databaseName=InventoryDB;encrypt=false
      SPRING_DATASOURCE_USERNAME: sa
      SPRING_DATASOURCE_PASSWORD: sapassword
      SPRING_CONFIG_IMPORT: optional:configserver:http://configserver:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discoveryserver:8761/eureka
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_ZIPKIN_BASE-URL: http://zipkin:9411
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9006/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spring-net

  orderservice:
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    container_name: orderservice
    image: ${DOCKER_USERNAME}/orderservice:latest
    ports:
      - "9003:9003"
    depends_on:
      configserver:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis-ktpm:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:sqlserver://host.docker.internal:1433;databaseName=OrderDB;encrypt=false
      SPRING_DATASOURCE_USERNAME: sa
      SPRING_DATASOURCE_PASSWORD: sapassword
      SPRING_CONFIG_IMPORT: optional:configserver:http://configserver:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discoveryserver:8761/eureka
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_DATA_REDIS_HOST: redis-ktpm
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_ZIPKIN_BASE-URL: http://zipkin:9411
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9003/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spring-net

  paymentservice:
    build:
      context: .
      dockerfile: PaymentService/Dockerfile
    container_name: paymentservice
    image: ${DOCKER_USERNAME}/paymentservice:latest
    ports:
      - "9005:9005"
    depends_on:
      configserver:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:sqlserver://host.docker.internal:1433;databaseName=PaymentDB;encrypt=false
      SPRING_DATASOURCE_USERNAME: sa
      SPRING_DATASOURCE_PASSWORD: sapassword
      SPRING_CONFIG_IMPORT: optional:configserver:http://configserver:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discoveryserver:8761/eureka
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_ZIPKIN_BASE-URL: http://zipkin:9411
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9005/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spring-net

  notificationservice:
    build:
      context: .
      dockerfile: NotificationService/Dockerfile
    container_name: notificationservice
    image: ${DOCKER_USERNAME}/notificationservice:latest
    ports:
      - "9004:9004"
    depends_on:
      configserver:
        condition: service_healthy
      discoveryserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:sqlserver://host.docker.internal:1433;databaseName=NotificationDB;encrypt=false
      SPRING_DATASOURCE_USERNAME: sa
      SPRING_DATASOURCE_PASSWORD: sapassword
      SPRING_CONFIG_IMPORT: optional:configserver:http://configserver:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discoveryserver:8761/eureka
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_ZIPKIN_BASE-URL: http://zipkin:9411
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9004/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spring-net

  redis-ktpm:
    image: redis:7.2
    container_name: redis-ktpm
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - spring-net

networks:
  spring-net:
    driver: bridge

volumes:
  redis-data: